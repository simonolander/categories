/*
 * This file is generated by jOOQ.
*/
package se.olander.categories.jooq.categories.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import se.olander.categories.jooq.categories.Keys;
import se.olander.categories.jooq.categories.tables.records.CategoriesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Categories extends TableImpl<CategoriesRecord> {

    private static final long serialVersionUID = -608796523;

    /**
     * The reference instance of <code>categories.categories</code>
     */
    public static final Categories CATEGORIES_ = new Categories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CategoriesRecord> getRecordType() {
        return CategoriesRecord.class;
    }

    /**
     * The column <code>categories.categories.id</code>.
     */
    public final TableField<CategoriesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>categories.categories.name</code>.
     */
    public final TableField<CategoriesRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * Create a <code>categories.categories</code> table reference
     */
    public Categories() {
        this("categories", null);
    }

    /**
     * Create an aliased <code>categories.categories</code> table reference
     */
    public Categories(String alias) {
        this(alias, CATEGORIES_);
    }

    private Categories(String alias, Table<CategoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Categories(String alias, Table<CategoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return se.olander.categories.jooq.categories.Categories.CATEGORIES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CategoriesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CATEGORIES_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CategoriesRecord> getPrimaryKey() {
        return Keys.KEY_CATEGORIES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CategoriesRecord>> getKeys() {
        return Arrays.<UniqueKey<CategoriesRecord>>asList(Keys.KEY_CATEGORIES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Categories as(String alias) {
        return new Categories(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Categories rename(String name) {
        return new Categories(name, null);
    }
}
