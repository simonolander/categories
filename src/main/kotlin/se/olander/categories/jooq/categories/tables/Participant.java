/*
 * This file is generated by jOOQ.
*/
package se.olander.categories.jooq.categories.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import se.olander.categories.jooq.categories.Categories;
import se.olander.categories.jooq.categories.Keys;
import se.olander.categories.jooq.categories.tables.records.ParticipantRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Participant extends TableImpl<ParticipantRecord> {

    private static final long serialVersionUID = 162306145;

    /**
     * The reference instance of <code>categories.participant</code>
     */
    public static final Participant PARTICIPANT = new Participant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ParticipantRecord> getRecordType() {
        return ParticipantRecord.class;
    }

    /**
     * The column <code>categories.participant.id</code>.
     */
    public final TableField<ParticipantRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>categories.participant.user_id</code>.
     */
    public final TableField<ParticipantRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>categories.participant.game_id</code>.
     */
    public final TableField<ParticipantRecord, Integer> GAME_ID = createField("game_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>categories.participant.admin</code>.
     */
    public final TableField<ParticipantRecord, Byte> ADMIN = createField("admin", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * Create a <code>categories.participant</code> table reference
     */
    public Participant() {
        this("participant", null);
    }

    /**
     * Create an aliased <code>categories.participant</code> table reference
     */
    public Participant(String alias) {
        this(alias, PARTICIPANT);
    }

    private Participant(String alias, Table<ParticipantRecord> aliased) {
        this(alias, aliased, null);
    }

    private Participant(String alias, Table<ParticipantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Categories.CATEGORIES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ParticipantRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PARTICIPANT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ParticipantRecord> getPrimaryKey() {
        return Keys.KEY_PARTICIPANT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ParticipantRecord>> getKeys() {
        return Arrays.<UniqueKey<ParticipantRecord>>asList(Keys.KEY_PARTICIPANT_PRIMARY, Keys.KEY_PARTICIPANT_UNIQ__USER_ID__GAME_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ParticipantRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ParticipantRecord, ?>>asList(Keys.PARTICIPANT_IBFK_1, Keys.PARTICIPANT_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Participant as(String alias) {
        return new Participant(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Participant rename(String name) {
        return new Participant(name, null);
    }
}
